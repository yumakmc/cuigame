#pragma once

#include "gameBaseScene.h"
#include  "BackGround.h"
#include "RogueGameTable.h"
#include "RogueGameParty.h"
#include "Common.h"
#include "BaseSaveManager.h"
#include <map>
#include <vector>
#include <array>
#include <utility>
#include<memory>
using namespace std;
namespace  roguegame {
	struct RogueSaveData :public BaseSaveData {
		RogueSaveData(const MyParty& m, const OpParty& o, int d, int s);
		RogueSaveData();
		~RogueSaveData();
		array<pair<int, MyChara>, 4> mymembers;
		array<pair<int, OpChara>, 4> opmembers;
		int day;
		int season;
	};
	enum Ending {
		E_Dummy,//初期値
		E_Bad,//春に春死ぬ
		E_True,//夏に春死ぬ
		E_SummerDead,//夏に春死ぬ
		E_Why,//秋に春死ぬ
		E_FallKillSummer,//秋に夏死ぬ
		E_KillMeteorWithAll,//隕石倒す誰も死んでない
		E_KillMeteorWithOutAll,//隕石倒す誰か死んでる
	};
	/*struct table {
	int next_exp;
	int max_hp;
	int atk;
	int def;
	};
	static vector<array < table, 100 >> TABLES;*/

	class RogueGame :public gameBaseScene {
	public:
		RogueGame(gameSceneChanger* changer);
		void Initialize() override;
		void Update() override;        //更新処理をオーバーライド。
		void Draw() override;            //描画処理をオーバーライド。
		int Attack(shared_ptr<Chara> from, shared_ptr<Chara> to);
		int Attack(int fromnum, int tonum);
		int Regenerate(shared_ptr<Chara> from, shared_ptr<Chara> to);
		int Regenerate(const int fromnum, const int tonum);
		int Special(shared_ptr<Chara> from, shared_ptr<Chara> to);
		int Special(int fromnum, int tonum);
		int Act(shared_ptr<Chara> from, shared_ptr<Chara> to, const ActionType type);
		int SelectAction(const ActionType type);
		inline int CalculateDmg(const shared_ptr<Chara> from, const shared_ptr<Chara> to);
		bool ChangeActMember();//全員終了したらfalse返す
		int CheckDeadPlayer();//行動終了時に呼び出す　死亡チェックとかエンディング条件チェックとか
		shared_ptr<Chara> GetMember(int num)const;//上からnum番目のメンバーへのポインタを返す
		shared_ptr<Chara> GetMember(const bool isop, const int num)const;

		MyParty myparty;
		OpParty opparty;
	private:

		int Save();
		int Load();

		BackGround abackground;

		shared_ptr<Situation> situation;

		shared_ptr<vector<string>>actionlog;

		int season = 0;
		int day = 0;

		int nowplayernum = 4;

		ActionType nowaction;
		Common::Rand rand;
	};
}
